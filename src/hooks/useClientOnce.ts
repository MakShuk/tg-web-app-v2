/**
 * Хук useClientOnce - выполняет функцию один раз только на клиентской стороне
 * 
 * Этот хук решает несколько важных задач:
 * 1. Предотвращает выполнение кода на сервере (SSR)
 * 2. Гарантирует однократное выполнение функции
 * 3. Безопасен для использования в React.StrictMode
 * 
 * Принцип работы:
 * - Использует useRef для сохранения состояния между рендерами
 * - Проверяет наличие объекта window (признак клиентского окружения)
 * - Использует флаг для предотвращения повторных вызовов
 */

import { useRef } from 'react';

/**
 * @param {Function} fn - Функция для однократного выполнения
 * 
 * Особенности:
 * - Функция выполнится только в браузере (typeof window !== 'undefined')
 * - Выполнится только один раз, даже при повторных рендерах
 * - Не вызывает утечек памяти благодаря useRef
 * 
 * Пример использования:
 * ```typescript
 * useClientOnce(() => {
 *   // Инициализация аналитики
 *   analytics.init();
 *   
 *   // Регистрация глобальных обработчиков
 *   window.addEventListener('resize', handleResize);
 *   
 *   // Загрузка внешних скриптов
 *   loadExternalScript();
 * });
 * ```
 */
export function useClientOnce(fn: () => void): void {
  // Создаем ref для хранения состояния между рендерами
  // canCall.current изначально true, что позволяет выполнить функцию при первом рендере
  const canCall = useRef(true);

  // Проверяем, что:
  // 1. Код выполняется в браузере (window существует)
  // 2. Функция еще не была выполнена (canCall.current === true)
  if (typeof window !== 'undefined' && canCall.current) {
    // Устанавливаем флаг в false, предотвращая повторные вызовы
    canCall.current = false;
    // Выполняем переданную функцию
    fn();
  }
}