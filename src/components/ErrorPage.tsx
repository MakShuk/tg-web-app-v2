/**
 * Компонент страницы ошибки для Next.js приложения
 * 
 * Этот компонент отвечает за:
 * 1. Отображение информации об ошибке пользователю
 * 2. Логирование ошибок для отладки
 * 3. Возможность повторной попытки выполнения действия
 */

import { useEffect } from 'react';

/**
 * Компонент ErrorPage
 * 
 * @component
 * @param {Object} props - Свойства компонента
 * @param {Error} props.error - Объект ошибки с опциональным свойством digest
 * @param {Function} [props.reset] - Функция для сброса состояния и повторной попытки
 * 
 * Особенности:
 * - digest используется Next.js для уникальной идентификации ошибок
 * - reset предоставляется Next.js для перезагрузки компонента
 * 
 * Пример использования:
 * ```tsx
 * <ErrorPage 
 *   error={new Error('Не удалось загрузить данные')}
 *   reset={() => fetchDataAgain()}
 * />
 * ```
 */
export function ErrorPage({
  error,
  reset,
}: {
  // Расширяем стандартный тип Error дополнительным полем digest
  error: Error & { digest?: string }
  // Опциональная функция сброса состояния
  reset?: () => void
}) {
  // Эффект для логирования ошибок
  useEffect(() => {
    // В реальном приложении здесь может быть отправка ошибки
    // в сервис мониторинга (Sentry, LogRocket и т.д.)
    console.error(error);
  }, [error]); // Перезапускается при изменении объекта ошибки

  return (
    <div>
      {/* Заголовок, информирующий о наличии ошибки */}
      <h2>Произошла необработанная ошибка!</h2>

      {/* Блок с текстом ошибки в формате кода */}
      <blockquote>
        <code>
          {error.message}
        </code>
      </blockquote>

      {/* 
        Кнопка повторной попытки
        Отображается только если предоставлена функция reset
        При нажатии вызывает функцию сброса состояния
      */}
      {reset && <button onClick={() => reset()}>Попробовать снова</button>}
    </div>
  );
}